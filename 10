#include <stdio.h>
#include <stdlib.h>

struct No {
    int dado;
    struct No* proximo;
};

struct Pilha {
    struct No* topo;
};

void inicializar(struct Pilha* p) {
    p->topo = NULL;
}

int esta_vazia(struct Pilha* p) {
    return p->topo == NULL;
}

void push(struct Pilha* p, int valor) {
    struct No* novo_no = (struct No*)malloc(sizeof(struct No));
    if (novo_no == NULL) {
        printf("Erro ao alocar memória!\n");
        exit(1);
    }
    novo_no->dado = valor;
    novo_no->proximo = p->topo;
    p->topo = novo_no;
}

int pop(struct Pilha* p) {
    if (esta_vazia(p)) {
        printf("Erro: pilha vazia.\n");
        exit(1);
    }
    struct No* temp = p->topo;
    int valor = temp->dado;
    p->topo = temp->proximo;
    free(temp);
    return valor;
}

int topo(struct Pilha* p) {
    if (esta_vazia(p)) {
        printf("Erro: pilha vazia.\n");
        exit(1);
    }
    return p->topo->dado;
}

void liberar_pilha(struct Pilha* p) {
    while (!esta_vazia(p)) {
        pop(p);
    }
}

int main() {
    struct Pilha p;
    inicializar(&p);

    push(&p, 10);
    push(&p, 20);
    push(&p, 30);

    printf("Topo: %d\n", topo(&p));

    printf("Pop: %d\n", pop(&p));
    printf("Topo: %d\n", topo(&p));

    while (!esta_vazia(&p)) {
        printf("Pop: %d\n", pop(&p));
    }

    if (esta_vazia(&p)) {
        printf("A pilha está vazia.\n");
    }

    return 0;
}
